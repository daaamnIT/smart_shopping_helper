import pytest
from unittest.mock import patch, MagicMock
from backend.services.ai_service.ai import parse_ingredients, format_recipe, get_recipe

def test_parse_ingredients_with_ingredients_section():
    recipe = """
    –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
    –ú—É–∫–∞ - 200 –≥
    –°–∞—Ö–∞—Ä - 100 –≥
    –°–æ–ª—å - –ø–æ –≤–∫—É—Å—É
    –ú–∞—Å–ª–æ - 50 –≥
    –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
    1. –°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    """
    result = parse_ingredients(recipe)
    assert result == {
        '–º—É–∫–∞': '200 –≥',
        '—Å–∞—Ö–∞—Ä': '100 –≥',
        '–º–∞—Å–ª–æ': '50 –≥'
    }

def test_parse_ingredients_without_ingredients_section():
    recipe = """
    –ú—É–∫–∞ - 200 –≥
    –°–∞—Ö–∞—Ä - 100 –≥
    –ú–∞—Å–ª–æ - 50 –≥
    """
    result = parse_ingredients(recipe)
    assert result == {
        '–º—É–∫–∞': '200 –≥',
        '—Å–∞—Ö–∞—Ä': '100 –≥',
        '–º–∞—Å–ª–æ': '50 –≥'
    }

def test_parse_ingredients_empty():
    recipe = ""
    result = parse_ingredients(recipe)
    assert result == {}

# Test format_recipe
def test_format_recipe():
    raw_recipe = """
    –ú—É–∫–∞ - 200 –≥
    –°–∞—Ö–∞—Ä - 100 –≥
    –ú–∞—Å–ª–æ - 50 –≥

    1. –°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    """
    formatted, ingredients = format_recipe(raw_recipe)
    assert "ü•ò –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:" in formatted
    assert ingredients == {
        '–º—É–∫–∞': '200 –≥',
        '—Å–∞—Ö–∞—Ä': '100 –≥',
        '–º–∞—Å–ª–æ': '50 –≥'
    }

# Test get_recipe
@pytest.mark.asyncio
async def test_get_recipe_success():
    mock_response = MagicMock()
    mock_response.json.return_value = {
        'result': {
            'alternatives': [{
                'message': {
                    'text': """
                    –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞:

                    –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
                    –°–ø–∞–≥–µ—Ç—Ç–∏ - 200 –≥
                    –°–ª–∏–≤–∫–∏ - 200 –º–ª
                    
                    –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
                    1. –°–≤–∞—Ä–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω—ã
                    
                    –ü–æ—Ä—Ü–∏–π - 2
                    """
                }
            }]
        }
    }
    mock_response.raise_for_status = MagicMock()

    with patch('requests.post', return_value=mock_response):
        query = "–∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏"
        user_dict = {
            "allergies": ["–±–µ–∫–æ–Ω"],
            "unliked_products": ["—è–π—Ü–∞", "—Å—ã—Ä"]
        }
        
        recipe, ingredients = await get_recipe(query, user_dict)
        assert "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:" in recipe
        assert ingredients == {
            '—Å–ø–∞–≥–µ—Ç—Ç–∏': '200 –≥',
            '—Å–ª–∏–≤–∫–∏': '200 –º–ª'
        }

@pytest.mark.asyncio
async def test_get_recipe_error():
    with patch('requests.post', side_effect=Exception("API Error")):
        query = "–∫–∞—Ä–±–æ–Ω–∞—Ä–∞"
        user_dict = {}
        
        recipe, ingredients = await get_recipe(query, user_dict)
        assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" in recipe
        assert ingredients == {}